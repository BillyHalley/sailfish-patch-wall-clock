diff --git a/usr/share/jolla-clock/pages/MainPage.qml b/usr/share/jolla-clock/pages/MainPage.qml
index 2abd931..3e6e2b5 100644
--- a/usr/share/jolla-clock/pages/MainPage.qml
+++ b/usr/share/jolla-clock/pages/MainPage.qml
@@ -204,6 +204,15 @@ Page {
                 }
             }
         }
+
+    MouseArea {
+        anchors.horizontalCenter: column.horizontalCenter
+	height: clock.height
+        width: clock.width
+        onClicked: pageStack.push(Qt.resolvedUrl("main/WallClockPage.qml"))
+    }
+
+
         VerticalScrollDecorator {}
     }
 }
diff --git b/usr/share/jolla-clock/pages/main/WallClockItem.qml b/usr/share/jolla-clock/pages/main/WallClockItem.qml
new file mode 100644
index 0000000..d4a7a7c
--- /dev/null
+++ b/usr/share/jolla-clock/pages/main/WallClockItem.qml
@@ -0,0 +1,104 @@
+import QtQuick 2.0
+import Sailfish.Silica 1.0
+import org.nemomobile.time 1.0
+import org.nemomobile.configuration 1.0
+
+Row {
+    id: root
+
+    //: "translate as non-empty if am/pm indicator starts the 12h time pattern"
+    //% ""
+    property string startWithAp: qsTrId("jolla-clock-start_with_ap")
+    property date time
+    property color color: Theme.primaryColor
+    property int primaryPixelSize: Theme.fontSizeHuge
+    property real timeTextWidth: timeText.width
+
+    layoutDirection: (startWithAp !== "" && startWithAp !== "jolla-clock-start_with_ap") ?  Qt.RightToLeft : Qt.LeftToRight
+
+    Text {
+        id: timeText
+
+        color: root.color
+        font { pixelSize: root.primaryPixelSize; family: Theme.fontFamilyHeading }
+        text: {
+            if (timeFormatConfig.value === "24") {
+
+		var result = "ss"
+		var seconds = time.getSeconds()
+
+                if (result.indexOf("ss") !== -1) {
+                    if (seconds < 10) {
+                        seconds = "0" + seconds
+                    }
+                    result = result.replace("ss", seconds)
+                } else {
+                    result = result.replace("s", seconds)
+                }
+ 
+
+               return Format.formatDate(time, Format.TimeValueTwentyFourHours) + ":" + result
+            } else {
+                // this is retarded, yay for qt and js time formatting options
+                var hours = time.getHours()
+                if (hours === 0) {
+                    hours = 12
+                } else if (hours > 12) {
+                    hours -= 12
+                }
+
+                //: Pattern for 12h time, h, hh, m, mm are supported, everything else left as is. escaping with ' not supported
+                //% "h:mm"
+                var result = "h:mm:ss" //qsTrId("jolla-clock-12h_time_pattern_without_ap")
+
+                if (result.indexOf("hh") !== -1) {
+                    if (hours < 10) {
+                        hours = "0" + hours
+                    }
+                    result = result.replace("hh", hours)
+                } else {
+                    result = result.replace("h", hours)
+                }
+
+                var minutes = time.getMinutes()
+                if (result.indexOf("mm") !== -1) {
+                    if (minutes < 10) {
+                        minutes = "0" + minutes
+                    }
+                    result = result.replace("mm", minutes)
+                } else {
+                    result = result.replace("m", minutes)
+                }
+
+                var seconds = time.getSeconds()
+                if (result.indexOf("ss") !== -1) {
+                    if (seconds < 10) {
+                        seconds = "0" + seconds
+                    }
+                    result = result.replace("ss", seconds)
+                } else {
+                    result = result.replace("s", seconds)
+                }
+                return result
+            }
+        }
+    }
+
+    Text {
+        y: timeText.font.pixelSize - font.pixelSize
+        visible: timeFormatConfig.value !== "24"
+        opacity: 0.4
+        color: root.color
+        font { pixelSize: timeText.font.pixelSize / 2.5; family: Theme.fontFamily; weight: Font.Bold }
+        text: time.getHours() < 12
+              //% "AM"
+              ? qsTrId("jolla-clock-la-am")
+              //% "PM"
+              : qsTrId("jolla-clock-la-pm")
+    }
+
+    ConfigurationValue {
+        id: timeFormatConfig
+        key: "/sailfish/i18n/lc_timeformat24h"
+    }
+}
diff --git b/usr/share/jolla-clock/pages/main/WallClockPage.qml b/usr/share/jolla-clock/pages/main/WallClockPage.qml
new file mode 100644
index 0000000..a3d6910
--- /dev/null
+++ b/usr/share/jolla-clock/pages/main/WallClockPage.qml
@@ -0,0 +1,97 @@
+/************************************************************************************
+**                                                                                 **
+** Created by Antonio Mancini                                                      **
+** For any problem Contact: <ziobilly94@gmail.com> or BillyHalley in OpenRepos.net **
+**                                                                                 **
+************************************************************************************/
+
+import QtQuick 2.0
+import Sailfish.Silica 1.0
+import Sailfish.Silica.private 1.0
+import org.nemomobile.time 1.0
+import com.jolla.settings 1.0
+import com.jolla.settings.system 1.0
+import org.nemomobile.systemsettings 1.0
+
+Page {
+    id:page
+    allowedOrientations: Orientation.All
+    property int lpmTimeout: 15
+
+    onStatusChanged: {
+        if (status === PageStatus.Activating) {
+            displaySettings.inhibitMode = DisplaySettings.InhibitStayOn
+            lpmTimer.restart()
+        } else if (status === PageStatus.Deactivating) {
+            displaySettings.inhibitMode = DisplaySettings.InhibitOff
+            lpmTimer.stop()
+        }
+
+    }
+
+    Rectangle {
+        id: blackBackground
+        anchors.fill: parent
+        visible: false
+        color: "black"
+    }
+
+    SilicaFlickable {
+        id: silicaFlickable
+        anchors.fill: parent
+
+        MouseArea {
+            anchors.fill: parent
+            onClicked: {
+                clock.color = Theme.primaryColor
+                pullDownMenu.visible = true
+                blackBackground.visible = false
+                page.backNavigation = true
+                lpmTimer.restart()
+            }
+        }
+
+        PullDownMenu {
+            id: pullDownMenu
+            MenuItem {
+                text: qsTr("Settings")
+                onClicked:{
+                    var dialog = pageStack.push("WallClockSettings.qml", {"lpmTimeout": lpmTimeout})
+                    dialog.accepted.connect(function() {
+                        page.lpmTimeout = dialog.lpmTimeout
+                    })
+                }
+            }
+        }
+        Timer {
+            id: lpmTimer
+            interval: lpmTimeout*1000
+            onTriggered: {
+                clock.color = Theme.highlightColor
+                pullDownMenu.visible = false
+                blackBackground.visible = true
+                backNavigation = false
+            }
+        }
+
+        WallClockItem {
+            id: clock
+            property alias enabled: wallClock.enabled
+            anchors.horizontalCenter: parent.horizontalCenter
+            anchors.verticalCenter: parent.verticalCenter
+            time: wallClock.time
+            primaryPixelSize: page.orientation === Orientation.Portrait || page.orientation ===  Orientation.PortraitInverted ? 124/480 * screen.width : 0.5*page.height
+
+            WallClock {
+                id: wallClock
+                updateFrequency: WallClock.Second
+            }
+        }
+
+        DisplaySettings {
+            id: displaySettings
+        }
+
+    }
+}
+
diff --git b/usr/share/jolla-clock/pages/main/WallClockSettings.qml b/usr/share/jolla-clock/pages/main/WallClockSettings.qml
new file mode 100644
index 0000000..e3289ae
--- /dev/null
+++ b/usr/share/jolla-clock/pages/main/WallClockSettings.qml
@@ -0,0 +1,113 @@
+import QtQuick 2.0
+import Sailfish.Silica 1.0
+import com.jolla.settings 1.0
+import com.jolla.settings.system 1.0
+import org.nemomobile.systemsettings 1.0
+
+Dialog {
+    property int lpmTimeout
+
+        function timeoutIndex(value) {
+            for (var i = 0; i < timeoutModel.count; ++i) {
+                if (value <= timeoutModel.get(i).value) {
+                    return i
+                }
+            }
+            return timeoutModel.count-1
+        }
+
+        onLpmTimeoutChanged: dimCombo.currentIndex = timeoutIndex(lpmTimeout)
+
+        Component.onCompleted: {
+            dimCombo.currentIndex = timeoutIndex(lpmTimeout)
+        }
+
+
+
+    SilicaFlickable {
+
+        anchors.fill: parent
+        contentHeight: content.height
+
+        function qsTrIdStrings() {
+            //% "15 seconds"
+            QT_TRID_NOOP("settings_display-me-15_seconds")
+            //% "30 seconds"
+            QT_TRID_NOOP("settings_display-me-30_seconds")
+            //% "1 minute"
+            QT_TRID_NOOP("settings_display-me-1_minute")
+            //% "2 minutes"
+            QT_TRID_NOOP("settings_display-me-2_minutes")
+            //% "5 minutes"
+            QT_TRID_NOOP("settings_display-me-5_minutes")
+            //% "10 minutes"
+            QT_TRID_NOOP("settings_display-me-10_minutes")
+        }
+
+        VerticalScrollDecorator {}
+
+        ListModel {
+            id: timeoutModel
+            ListElement {
+                label: "settings_display-me-15_seconds"
+                value: 15
+            }
+            ListElement {
+                label: "settings_display-me-30_seconds"
+                value: 30
+            }
+            ListElement {
+                label: "settings_display-me-1_minute"
+                value: 60
+            }
+            ListElement {
+                label: "settings_display-me-2_minutes"
+                value: 120
+            }
+            ListElement {
+                label: "settings_display-me-10_minutes"
+                value: 600
+            }
+        }
+
+     
+	Column {
+            id: content
+
+            width: parent.width
+
+            DialogHeader {
+                //% "Display"
+                title: "LowPowerMode Settings" 
+            }
+
+            ComboBox {
+                id: dimCombo
+                onCurrentIndexChanged: lpmTimeout = timeoutModel.get(currentIndex).value
+
+                //% "Blank display after"
+                label: qsTrId("settings_display-la-blank_display_after")
+                menu: ContextMenu {
+                    Repeater {
+                        model: timeoutModel
+                        MenuItem {
+                            text: qsTrId(label)
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    
+    DisplaySettings {
+        id: displaySettings
+    }
+
+    onDone: {
+        if (result === DialogResult.Accepted) {
+            lpmTimeout = lpmTimeout
+        }
+    }
+
+}
